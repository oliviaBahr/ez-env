# Product Requirements Document (PRD): ezenv

## Overview

`ezenv` is a Git extension written in Go that transparently encrypts and decrypts selected files in a Git repository using SSH keys of GitHub collaborators. It integrates with Git's clean/smudge filters to automatically encrypt files on `git add` and decrypt files on `git checkout` or `git pull`. It ensures that only GitHub collaborators can decrypt the files.

## Goals

* Automatically set up Git clean/smudge filters with `git env init`
* Encrypt selected files using a single shared DEK (Data Encryption Key), encrypted to each collaborator's SSH key
* Fetch GitHub collaborator public SSH keys via the GitHub API
* Automatically update the keyring on pull or decrypt if collaborators change
* No `.ezdotrc` or config file

## Key Features

* Git extension interface: `git env <command>`
* Clean/smudge integration for encryption and decryption
* Uses `.gitenv_keyring` to store SSH public keys of collaborators
* Uses `.gitattributes` for filter configuration

## Command Interfaces

### `git env init`

* Creates `.gitenv_keyring` by querying GitHub API for all collaborators on the current remote repository
* Fetches all public SSH keys for each collaborator
* Generates a single shared DEK (symmetric key)
* Encrypts the DEK to each SSH public key and stores these encrypted DEKs in a metadata block
* Sets up `.gitattributes` and Git filter config in `.git/config`
* Adds `.gitenv_keyring` and `.gitattributes` to the repo
* Encrypts files listed by subsequent `git env add-file` calls using the DEK

### `git env add-file <path>`

* Adds the file to `.gitattributes` with `filter=ezenv`
* Encrypts the file using the shared DEK (e.g., AES key)

### `git env update-keys`

* Re-fetches collaborator list and SSH keys
* Updates `.gitenv_keyring` with any new collaborators or new keys
* Encrypts the shared DEK to any new public keys (no need to re-encrypt file contents)
* Appends new encrypted DEKs to the metadata header

### Clean Filter (`git add`)

* Reads file content
* Encrypts content with the shared DEK
* Writes metadata block (containing encrypted DEKs for all collaborators) at the top of each encrypted file

### Smudge Filter (`git pull`, `git checkout`)

* Reads encrypted file
* Parses metadata to find encrypted DEKs
* Attempts to decrypt the shared DEK using local SSH private key
* Uses decrypted DEK to decrypt the file content
* Replaces file content with plaintext in working tree
* Triggers `update-keys` to detect new collaborators

## File Structure (Repo where `git env init` is run)

```
<your-repo>/
├── .gitenv_keyring         # SSH keys of collaborators
├── .gitattributes          # Git attributes for filter configuration
├── <any added encrypted files>
```

## Directory Structure of ezenv (project source)

```

```

## Notes

* Do not include `.ezenvrc` or any similar config file
* All logic should be scoped to the repo that `git env init` is run in
* GitHub token can be retrieved from environment or `gh auth status`
* SSH decryption uses standard OpenSSH tooling
* No third-party encryption tools (e.g., age) should be used

---

Let me know when you're ready to start implementing or need scaffolding for any part.
